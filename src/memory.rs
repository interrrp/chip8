use std::ops::{Index, IndexMut};

pub const MEMORY_SIZE: usize = 0xFFF;
pub const MEMORY_PROGRAM_START: usize = 0x200;

const FONTSET_SIZE: usize = 80;
const FONTSET: [u8; FONTSET_SIZE] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[derive(Debug)]
pub struct Memory {
    buf: [u8; MEMORY_SIZE],
}

impl Memory {
    pub fn new() -> Memory {
        let mut mem = Memory {
            buf: [0; MEMORY_SIZE],
        };

        mem.buf[0..FONTSET_SIZE].copy_from_slice(&FONTSET);

        mem
    }

    pub fn load_program_bytes(&mut self, program_bytes: &[u8]) {
        self.buf[MEMORY_PROGRAM_START..MEMORY_PROGRAM_START + program_bytes.len()]
            .copy_from_slice(program_bytes);
    }
}

impl Index<usize> for Memory {
    type Output = u8;

    fn index(&self, index: usize) -> &u8 {
        &self.buf[index]
    }
}

impl IndexMut<usize> for Memory {
    fn index_mut(&mut self, index: usize) -> &mut u8 {
        &mut self.buf[index]
    }
}
